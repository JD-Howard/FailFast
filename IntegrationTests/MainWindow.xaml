<Window x:Class="IntegrationTests.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:IntegrationTests"
        mc:Ignorable="d"
        DataContext="{Binding RelativeSource={RelativeSource Self}}"
        Title="FailFast Integration Tests"
        Height="400" MinHeight="400"
        Width="400" MinWidth="400">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>
        
        <Button Grid.Row="0" Content="Populate Logging Handlers" Padding="10,1"
                Click="AddLogHandlers_OnClick" HorizontalAlignment="Center"/>
        
        <Separator Grid.Row="1" Width="{Binding ActualWidth}" Margin="20,5"/>
        
        <TextBlock Grid.Row="2" TextWrapping="Wrap" HorizontalAlignment="Center">
            When this is run in Debug mode, the FailFast.Configure.BreakBehavior assigned
            via the checkbox will determine behavior. Initially, the InitFalse setting
            should "deactivate" the parts of FailFast that may cause production side
            effects and not cause a Debugger.Break(). However, InitTrue and StaticTrue
            should both yield a Debugger.Break() and be capable of returning to
            MainWindow.xaml.cs with 1 StepIn or StepOut. Also, once a Static is set,
            it should no longer be updatable at runtime.
        </TextBlock>
        
        <WrapPanel Grid.Row="3" Margin="3">
            <Button Margin="5" Content="When.Throws()" Click="TestThrows_OnClick"/>
            <Button Margin="5" Content="When.Throws().On()" Click="TestThrowsOnT_OnClick"/>
            <Button Margin="5" Content="When.Null()" Click="TestNull_OnClick"/>
            <Button Margin="5" Content="When.NotNull()" Click="TestNotNull_OnClick"/>
            <Button Margin="5" Content="When.True()" Click="TestTrue_OnClick"/>
            <Button Margin="5" Content="When.NotTrue()" Click="TestNotTrue_OnClick"/>
            <CheckBox Margin="5,0" IsThreeState="True" IsChecked="{Binding CanBreak}"
                      VerticalContentAlignment="Center" VerticalAlignment="Center">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="BreakBehavior: "/>
                        <TextBlock Text="{Binding BreakStateName}" FontWeight="Bold"/>
                    </StackPanel>
                </CheckBox>
        </WrapPanel>
        
        <Separator Grid.Row="4" Width="{Binding ActualWidth}" Margin="20,5"/>
        
        <TextBlock Grid.Row="5" TextWrapping="Wrap" HorizontalAlignment="Center">
            When this is run in Debug mode, All of these test should bypass the
            FailFast.Configure.BreakBehavior, use an explicit Debugger.Break()
            and capable of returning to MainWindow.xaml.cs with 1 StepIn or StepOut.
        </TextBlock>
        
        <WrapPanel Grid.Row="6" Margin="3">
            <Button Margin="5" Content="BreakWhen.Null()" Click="ExplicitTestNull_OnClick"/>
            <Button Margin="5" Content="BreakWhen.NotNull()" Click="ExplicitTestNotNull_OnClick"/>
            <Button Margin="5" Content="BreakWhen.True()" Click="ExplicitTestTrue_OnClick"/>
            <Button Margin="5" Content="BreakWhen.NotTrue()" Click="ExplicitTestNotTrue_OnClick"/>
        </WrapPanel>
        
        
    </Grid>
    
</Window>
